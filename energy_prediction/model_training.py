# import packages
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import pickle
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler
from sklearn.compose import ColumnTransformer
from xgboost import XGBRegressor

def preprocessing():
    # load data (later via database/streaming server)
    data = pd.read_csv("Plant_1_Generation_Data.csv") # energy generated by PV in the past
    data_weather = pd.read_csv("Plant_1_Weather_Sensor_Data.csv") # solar irradiation in the past (matching data)
    # feature selection 
    data = data.drop(['PLANT_ID', 'SOURCE_KEY', 'DAILY_YIELD', 'TOTAL_YIELD', 'DC_POWER'], axis=1)
    data_weather = data_weather.drop(['PLANT_ID', 'SOURCE_KEY', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE'], axis=1)
    # data cleaning
    data['DATE_TIME'] = pd.to_datetime(data.DATE_TIME, format="%d-%m-%Y %H:%M")
    data_weather['DATE_TIME'] = pd.to_datetime(data_weather.DATE_TIME, format="%Y-%m-%d %H:%M:%S")
    data = data.groupby('DATE_TIME').sum().reset_index()
    df = pd.merge(data, data_weather, how="left", left_on="DATE_TIME", right_on="DATE_TIME")
    df['AC_POWER'] = df['AC_POWER'].astype('float32')
    df = df.dropna()

    return df

# this method runs 1 time per day on the server to build model with current data 
def model_training():
    df = preprocessing()
    ### BUILD PIPELINE ###
    X_train = df.drop('AC_POWER', axis=1)
    y_train = df['AC_POWER']
    # feature engineering 
    numeric_transformer = Pipeline(steps=[
        ('scaler', MinMaxScaler())])
    # select features to transform
    numeric_features = ['IRRADIATION']
    # build preprecessor 
    preprocessor = ColumnTransformer(
    transformers=[
            ('num', numeric_transformer, numeric_features)])
    # select & set xgboost algorithm
    regressor = XGBRegressor(learning_rate=0.23039340275252,
                    max_depth=6,
                    n_estimators=83,
                    random_state=42)

    ### MODEL TRAINING ###
    # init pipeline
    pipeline = Pipeline(steps = [
            ('preprocessor', preprocessor),
            ('regressor',regressor)
        ])
    # train model 
    model = pipeline.fit(X_train, y_train)

    # save model on server
    filename = 'solar_model.sav'
    pickle.dump(model, open(filename, 'wb'))
    
    return model

# this method can be called in the optimization.py to predict the solar energy based on the solar irradiation forecast
# based on daily trained model 
# data = solar irradiation forecast for next 30 days
def model_prediction(data):
    # load model 
    model = pickle.load(open('solar_model.sav', 'rb'))
    # prediction
    predictions = model.predict(data)
    data['pred_energy'] = predictions

    return data


